
*** CURRENTLY ***

*) S-Lang/Python support in threads

a) threadlink tag

It can check if going to a multi-language page and say

  "Name of thread" (<Python> or <S-Lang>) 

where <Python>/<S-Lang> are the acutal links. If you want to link to
a specific version then you have to add an attribute (proglang?) to
say whether "sl" or "py", in which case you just get

  "<Name of thread>"

as before (ie the thread name is the link).

See also the discussion below when used in a thread itself.

b) pages

add to metadata 

    <proglang>sl</proglang>
    <proglang>py</proglang>

to indicate a multi-language thread. I decided against having these in
a container as we don't really need them; I'm sure this will come back
to haunt me (and may change if the code gets too painful). If there
are no proglang tags then you just get a single file (as before). The
presence of a proglang tag means that you get index.<sl|py>.html and
an index.html file created. You can have only a single proglang tag,
which means you get the index.<sl|py>.html file and index.html is a
referral to it.

Qus: how to encode lang-specific text/sections/...

i) ahelp tags

If we leave off the context then we can let ahelp + knowledge of proglang
decide which context (eg sl.sherpa) to use. This could be extended to
other links/pages/etc. We could also add a proglang attribute to ahelp
tags but it's unclear how that would play out (ie if you give it then
couldn't you just say 'context="sl.sherpa"' anyway)?

ii) threadlink tags

We should be able to make these clever enough as with ahelp.

iii) hardcopy

need separate s-lang and python PDF versions

iv) img<n>.html

do these need to be separate?

v) general contents

We could try adding proglang="sl"/proglang="py" attributes to
say what should be included. This would probably be best handled by
having a pre-process step that goes through and removes those nodes
with proglang!=<desired proglang> and leaves everything else.

QUS: how to handle thread indexes?

*) URLs in PDFs

Check whether URLs printed out in the hardcopy versions of pages -
in particular ahelp indexes - are correct. This is the URL value at the top
of the page giving the location of the page being viewed.

*) links.xsl and /<site>/ links

There are links to /ciao/ (and sherpa/chips) which probably need to
allow for the fact we may want them to go to /ciaobeta/ etc.

Should they include the "version" value from the config.dat file for
that site? The problem comes when you want to link to the latest version 
of that page and not a particular version (as is most oftern the case apart
from this beta release).

*) download links

should probably move the download link name into the config file file
rather than update the links.xsl (and other?) pages at each release.
Actually, they do not hardcode the version; the problem here is that
we have the string _ciao4b2_ (or b3) that is hardcoded.

*) DOM manipulation rather than stylesheets/manual code

Convert publish.pl to use the DOM rather than stylesheets to extract
simple information from files. Done for many simple cases. There are
still 
  list.xsl, list_<x>.xsl for
    <x> = faq, thread, threadindex, dictionary

mk_ahelp_setup.pl uses DOM to parse the ahelp files but then stores
the information in a set of perl structures which it then uses to 
manually create an XML output file. We should look at creating a
DOM which can then be written out directly. Also, remove the use of
the ahelpindex.dat file in the mk_ahelp_*.pl files.
